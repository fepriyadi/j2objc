//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/base/Stopwatch.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonBaseStopwatch")
#ifdef RESTRICT_ComGoogleCommonBaseStopwatch
#define INCLUDE_ALL_ComGoogleCommonBaseStopwatch 0
#else
#define INCLUDE_ALL_ComGoogleCommonBaseStopwatch 1
#endif
#undef RESTRICT_ComGoogleCommonBaseStopwatch

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonBaseStopwatch_) && (INCLUDE_ALL_ComGoogleCommonBaseStopwatch || defined(INCLUDE_ComGoogleCommonBaseStopwatch))
#define ComGoogleCommonBaseStopwatch_

@class ComGoogleCommonBaseTicker;
@class JavaUtilConcurrentTimeUnit;

/*!
 @brief An object that accurately measures <i>elapsed time</i>: the measured duration between two
  successive readings of "now" in the same process.
 <p>In contrast, <i>wall time</i> is a reading of "now" as given by a method like 
 <code>System.currentTimeMillis()</code>, best represented as an <code>Instant</code>. Such values 
 <p><i>can</i> be subtracted to obtain a <code>Duration</code> (such as by <code>Duration.between</code>),
  but doing so does <i>not</i> give a reliable measurement of elapsed time, because wall time
  readings are inherently approximate, routinely affected by periodic clock corrections. Because
  this class (by default) uses <code>System.nanoTime</code>, it is unaffected by these changes. 
 <p>Use this class instead of direct calls to <code>System.nanoTime</code> for two reasons: 
 <ul>
    <li>The raw <code>long</code> values returned by <code>nanoTime</code> are meaningless and unsafe to use
        in any other way than how <code>Stopwatch</code> uses them.
    <li>An alternative source of nanosecond ticks can be substituted, for example for testing or
        performance reasons, without affecting most of your code. 
 </ul>
  
 <p>Basic usage: 
 @code
 Stopwatch stopwatch = Stopwatch.createStarted();
  doSomething();
  stopwatch.stop(); // optional
  long millis = stopwatch.elapsed(MILLISECONDS);
  log.info("time: " + stopwatch); // formatted string like "12.3 ms" 
 
@endcode
  
 <p>The state-changing methods are not idempotent; it is an error to start or stop a stopwatch
  that is already in the desired state. 
 <p>When testing code that uses this class, use <code>createUnstarted(Ticker)</code> or <code>createStarted(Ticker)</code>
  to supply a fake or mock ticker. This allows you to simulate any valid
  behavior of the stopwatch. 
 <p><b>Note:</b> This class is not thread-safe. 
 <p><b>Warning for Android users:</b> a stopwatch with default behavior may not continue to keep
  time while the device is asleep. Instead, create one like this: 
 @code
 Stopwatch.createStarted(
       new Ticker() {
         public long read() {
           return android.os.SystemClock.elapsedRealtimeNanos();
         }
       }); 
 
@endcode
 @author Kevin Bourrillion
 @since 10.0
 */
@interface ComGoogleCommonBaseStopwatch : NSObject

#pragma mark Public

/*!
 @brief Creates (and starts) a new stopwatch using <code>System.nanoTime</code> as its time source.
 @since 15.0
 */
+ (ComGoogleCommonBaseStopwatch *)createStarted;

/*!
 @brief Creates (and starts) a new stopwatch, using the specified time source.
 @since 15.0
 */
+ (ComGoogleCommonBaseStopwatch *)createStartedWithComGoogleCommonBaseTicker:(ComGoogleCommonBaseTicker * __nonnull)ticker;

/*!
 @brief Creates (but does not start) a new stopwatch using <code>System.nanoTime</code> as its time source.
 @since 15.0
 */
+ (ComGoogleCommonBaseStopwatch *)createUnstarted;

/*!
 @brief Creates (but does not start) a new stopwatch, using the specified time source.
 @since 15.0
 */
+ (ComGoogleCommonBaseStopwatch *)createUnstartedWithComGoogleCommonBaseTicker:(ComGoogleCommonBaseTicker * __nonnull)ticker;

/*!
 @brief Returns the current elapsed time shown on this stopwatch, expressed in the desired time unit,
  with any fraction rounded down.
 <p>Note that the overhead of measurement can be more than a microsecond, so it is generally not
  useful to specify <code>TimeUnit.NANOSECONDS</code> precision here.
 @since 14.0 (since 10.0 as <code>elapsedTime()</code>)
 */
- (jlong)elapsedWithJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit * __nonnull)desiredUnit;

/*!
 @brief Returns <code>true</code> if <code>start()</code> has been called on this stopwatch, and <code>stop()</code>
  has not been called since the last call to <code>start()</code>.
 */
- (jboolean)isRunning;

/*!
 @brief Sets the elapsed time for this stopwatch to zero, and places it in a stopped state.
 @return this <code>Stopwatch</code> instance
 */
- (ComGoogleCommonBaseStopwatch *)reset;

/*!
 @brief Starts the stopwatch.
 @return this <code>Stopwatch</code> instance
 @throw IllegalStateExceptionif the stopwatch is already running.
 */
- (ComGoogleCommonBaseStopwatch *)start;

/*!
 @brief Stops the stopwatch.Future reads will return the fixed duration that had elapsed up to this
  point.
 @return this <code>Stopwatch</code> instance
 @throw IllegalStateExceptionif the stopwatch is already stopped.
 */
- (ComGoogleCommonBaseStopwatch *)stop;

/*!
 @brief Returns a string representation of the current elapsed time.
 */
- (NSString *)description;

#pragma mark Package-Private

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithComGoogleCommonBaseTicker:(ComGoogleCommonBaseTicker * __nonnull)ticker;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseStopwatch)

FOUNDATION_EXPORT ComGoogleCommonBaseStopwatch *ComGoogleCommonBaseStopwatch_createUnstarted(void);

FOUNDATION_EXPORT ComGoogleCommonBaseStopwatch *ComGoogleCommonBaseStopwatch_createUnstartedWithComGoogleCommonBaseTicker_(ComGoogleCommonBaseTicker *ticker);

FOUNDATION_EXPORT ComGoogleCommonBaseStopwatch *ComGoogleCommonBaseStopwatch_createStarted(void);

FOUNDATION_EXPORT ComGoogleCommonBaseStopwatch *ComGoogleCommonBaseStopwatch_createStartedWithComGoogleCommonBaseTicker_(ComGoogleCommonBaseTicker *ticker);

FOUNDATION_EXPORT void ComGoogleCommonBaseStopwatch_init(ComGoogleCommonBaseStopwatch *self);

FOUNDATION_EXPORT ComGoogleCommonBaseStopwatch *new_ComGoogleCommonBaseStopwatch_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonBaseStopwatch *create_ComGoogleCommonBaseStopwatch_init(void);

FOUNDATION_EXPORT void ComGoogleCommonBaseStopwatch_initWithComGoogleCommonBaseTicker_(ComGoogleCommonBaseStopwatch *self, ComGoogleCommonBaseTicker *ticker);

FOUNDATION_EXPORT ComGoogleCommonBaseStopwatch *new_ComGoogleCommonBaseStopwatch_initWithComGoogleCommonBaseTicker_(ComGoogleCommonBaseTicker *ticker) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonBaseStopwatch *create_ComGoogleCommonBaseStopwatch_initWithComGoogleCommonBaseTicker_(ComGoogleCommonBaseTicker *ticker);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseStopwatch)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonBaseStopwatch")
