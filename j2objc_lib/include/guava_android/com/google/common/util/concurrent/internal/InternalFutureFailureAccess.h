//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/util/concurrent/internal/InternalFutureFailureAccess.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentInternalInternalFutureFailureAccess")
#ifdef RESTRICT_ComGoogleCommonUtilConcurrentInternalInternalFutureFailureAccess
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentInternalInternalFutureFailureAccess 0
#else
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentInternalInternalFutureFailureAccess 1
#endif
#undef RESTRICT_ComGoogleCommonUtilConcurrentInternalInternalFutureFailureAccess

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonUtilConcurrentInternalInternalFutureFailureAccess_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentInternalInternalFutureFailureAccess || defined(INCLUDE_ComGoogleCommonUtilConcurrentInternalInternalFutureFailureAccess))
#define ComGoogleCommonUtilConcurrentInternalInternalFutureFailureAccess_

@class JavaLangThrowable;

/*!
 @brief A future that, if it fails, may <i>optionally</i> provide access to the cause of the failure.
 <p>This class is used only for micro-optimization. Standard <code>Future</code> utilities benefit from
  this optimization, so there is no need to specialize methods to return or accept this type
  instead of <code>ListenableFuture</code>.
  
 <p>This class is GWT-compatible.
 @since <code>com.google.guava:failureaccess:1.0</code>, which was added as a dependency of Guava in
      Guava 27.0
 */
@interface ComGoogleCommonUtilConcurrentInternalInternalFutureFailureAccess : NSObject

#pragma mark Protected

/*!
 @brief Constructor for use by subclasses.
 */
- (instancetype __nonnull)init;

/*!
 @brief Usually returns <code>null</code> but, if this <code>Future</code> has failed, may <i>optionally</i>
  return the cause of the failure."
 Failure" means specifically "completed with an exception"; it
  does not include "was cancelled." To be explicit: If this method returns a non-null value,
  then: 
 <ul>
    <li><code>isDone()</code> must return <code>true</code>
    <li><code>isCancelled()</code> must return <code>false</code>
    <li><code>get()</code> must not block, and it must throw an <code>ExecutionException</code> with the
        return value of this method as its cause 
 </ul>
  
 <p>This method is <code>protected</code> so that classes like <code>com.google.common.util.concurrent.SettableFuture</code>
  do not expose it to their users as an
  instance method. In the unlikely event that you need to call this method, call <code>InternalFutures.tryInternalFastPathGetFailure(InternalFutureFailureAccess)</code>
 .
 */
- (JavaLangThrowable *)tryInternalFastPathGetFailure;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentInternalInternalFutureFailureAccess)

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentInternalInternalFutureFailureAccess_init(ComGoogleCommonUtilConcurrentInternalInternalFutureFailureAccess *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentInternalInternalFutureFailureAccess)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentInternalInternalFutureFailureAccess")
