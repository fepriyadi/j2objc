//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/junit/experimental/theories/DataPoint.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJunitExperimentalTheoriesDataPoint")
#ifdef RESTRICT_OrgJunitExperimentalTheoriesDataPoint
#define INCLUDE_ALL_OrgJunitExperimentalTheoriesDataPoint 0
#else
#define INCLUDE_ALL_OrgJunitExperimentalTheoriesDataPoint 1
#endif
#undef RESTRICT_OrgJunitExperimentalTheoriesDataPoint

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJunitExperimentalTheoriesDataPoint_) && (INCLUDE_ALL_OrgJunitExperimentalTheoriesDataPoint || defined(INCLUDE_OrgJunitExperimentalTheoriesDataPoint))
#define OrgJunitExperimentalTheoriesDataPoint_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;
@class IOSObjectArray;

/*!
 @brief Annotating an field or method with &#064;DataPoint will cause the field value
  or the value returned by the method to be used as a potential parameter for
  theories in that class, when run with the 
 <code>Theories</code> runner.
 <p>
  A DataPoint is only considered as a potential value for parameters for
  which its type is assignable. When multiple <code>DataPoint</code>s exist 
  with overlapping types more control can be obtained by naming each DataPoint 
  using the value of this annotation, e.g. with 
 <code>&#064;DataPoint({"dataset1", "dataset2"})</code>, and then specifying
  which named set to consider as potential values for each parameter using the 
 <code>&.064;FromDataPoints</code>
  annotation. 
 <p>
  Parameters with no specified source (i.e. without &#064;FromDataPoints or
  other <code>&.064;ParameterSuppliedBy</code>
  annotations) will use all <code>DataPoint</code>s that are
  assignable to the parameter type as potential values, including named sets of 
 <code>DataPoint</code>s.
   
 @code

   &#064;DataPoint
  public static String dataPoint = "value";  
  &#064;DataPoint("generated")
  public static String generatedDataPoint() {
      return "generated value";
  }  
  &#064;Theory
  public void theoryMethod(String param) {
      ...
  } 
  
@endcode
 - seealso: org.junit.experimental.theories.Theories
 - seealso: org.junit.experimental.theories.Theory
 - seealso: org.junit.experimental.theories.DataPoint
 - seealso: org.junit.experimental.theories.FromDataPoints
 */
@protocol OrgJunitExperimentalTheoriesDataPoint < JavaLangAnnotationAnnotation >

@property (readonly) IOSObjectArray *value;
@property (readonly) IOSObjectArray *ignoredExceptions;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface OrgJunitExperimentalTheoriesDataPoint : NSObject < OrgJunitExperimentalTheoriesDataPoint > {
 @public
  IOSObjectArray *value_;
  IOSObjectArray *ignoredExceptions_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitExperimentalTheoriesDataPoint)

FOUNDATION_EXPORT id<OrgJunitExperimentalTheoriesDataPoint> create_OrgJunitExperimentalTheoriesDataPoint(IOSObjectArray *ignoredExceptions, IOSObjectArray *value);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitExperimentalTheoriesDataPoint)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJunitExperimentalTheoriesDataPoint")
