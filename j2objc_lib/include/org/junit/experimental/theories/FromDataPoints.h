//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/junit/experimental/theories/FromDataPoints.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJunitExperimentalTheoriesFromDataPoints")
#ifdef RESTRICT_OrgJunitExperimentalTheoriesFromDataPoints
#define INCLUDE_ALL_OrgJunitExperimentalTheoriesFromDataPoints 0
#else
#define INCLUDE_ALL_OrgJunitExperimentalTheoriesFromDataPoints 1
#endif
#undef RESTRICT_OrgJunitExperimentalTheoriesFromDataPoints

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJunitExperimentalTheoriesFromDataPoints_) && (INCLUDE_ALL_OrgJunitExperimentalTheoriesFromDataPoints || defined(INCLUDE_OrgJunitExperimentalTheoriesFromDataPoints))
#define OrgJunitExperimentalTheoriesFromDataPoints_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

/*!
 @brief Annotating a parameter of a <code>&.064;Theory</code>
  method with <code>&#064;FromDataPoints</code> will limit the
  datapoints considered as potential values for that parameter to just the 
 <code>DataPoints</code> with the given
  name.DataPoint names can be given as the value parameter of the 
 &#064;DataPoints annotation.
 <p>
  DataPoints without names will not be considered as values for any parameters
  annotated with &#064;FromDataPoints.
  @code

   &#064;DataPoints
  public static String[] unnamed = new String[] { ... };  
  &#064;DataPoints("regexes")
  public static String[] regexStrings = new String[] { ... };  
  &#064;DataPoints({"forMatching", "alphanumeric"})
  public static String[] testStrings = new String[] { ... };   
  &#064;Theory
  public void stringTheory(String param) {
      // This will be called with every value in 'regexStrings',
      // 'testStrings' and 'unnamed'.
  }  
  &#064;Theory
  public void regexTheory(&#064;FromDataPoints("regexes") String regex,
                                                  &#064;FromDataPoints("forMatching") String value) {
      // This will be called with only the values in 'regexStrings' as 
      // regex, only the values in 'testStrings' as value, and none 
      // of the values in 'unnamed'.
  } 
  
@endcode
 - seealso: org.junit.experimental.theories.Theory
 - seealso: org.junit.experimental.theories.DataPoint
 - seealso: org.junit.experimental.theories.DataPoints
 */
@protocol OrgJunitExperimentalTheoriesFromDataPoints < JavaLangAnnotationAnnotation >

@property (readonly) NSString *value;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface OrgJunitExperimentalTheoriesFromDataPoints : NSObject < OrgJunitExperimentalTheoriesFromDataPoints > {
 @public
  NSString *value_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitExperimentalTheoriesFromDataPoints)

FOUNDATION_EXPORT id<OrgJunitExperimentalTheoriesFromDataPoints> create_OrgJunitExperimentalTheoriesFromDataPoints(NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitExperimentalTheoriesFromDataPoints)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJunitExperimentalTheoriesFromDataPoints")
