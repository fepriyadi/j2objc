//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/junit/experimental/theories/ParameterSupplier.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJunitExperimentalTheoriesParameterSupplier")
#ifdef RESTRICT_OrgJunitExperimentalTheoriesParameterSupplier
#define INCLUDE_ALL_OrgJunitExperimentalTheoriesParameterSupplier 0
#else
#define INCLUDE_ALL_OrgJunitExperimentalTheoriesParameterSupplier 1
#endif
#undef RESTRICT_OrgJunitExperimentalTheoriesParameterSupplier

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJunitExperimentalTheoriesParameterSupplier_) && (INCLUDE_ALL_OrgJunitExperimentalTheoriesParameterSupplier || defined(INCLUDE_OrgJunitExperimentalTheoriesParameterSupplier))
#define OrgJunitExperimentalTheoriesParameterSupplier_

@class OrgJunitExperimentalTheoriesParameterSignature;
@protocol JavaUtilList;

/*!
 @brief Abstract parent class for suppliers of input data points for theories.Extend this class to customize how <code>Theories</code>
  runner
  finds accepted data points.
 Then use your class together with <b>&#064;ParametersSuppliedBy</b> on input
  parameters for theories. 
 <p>
  For example, here is a supplier for values between two integers, and an annotation that references it: 
 @code

          &#064;Retention(RetentionPolicy.RUNTIME)
          <b>&#064;ParametersSuppliedBy</b>(BetweenSupplier.class)
      public @@interface Between {
          int first();
          int last();
      }
      public static class BetweenSupplier extends <b>ParameterSupplier</b> {
                  &#064;Override
          public List&lt;<b>PotentialAssignment</b>&gt; getValueSources(<b>ParameterSignature</b> sig) {
              List&lt;<b>PotentialAssignment</b>&gt; list = new ArrayList&lt;PotentialAssignment&gt;();
              Between annotation = (Between) sig.getSupplierAnnotation();
              for (int i = annotation.first(); i &lt;= annotation.last(); i++)
                  list.add(<b>PotentialAssignment</b>.forValue("ints", i));
              return list;
          }        }    
  
@endcode
  </p>
 - seealso: org.junit.experimental.theories.ParametersSuppliedBy
 - seealso: org.junit.experimental.theories.Theories
 - seealso: org.junit.experimental.theories.FromDataPoints
 */
@interface OrgJunitExperimentalTheoriesParameterSupplier : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

- (id<JavaUtilList>)getValueSourcesWithOrgJunitExperimentalTheoriesParameterSignature:(OrgJunitExperimentalTheoriesParameterSignature *)sig;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitExperimentalTheoriesParameterSupplier)

FOUNDATION_EXPORT void OrgJunitExperimentalTheoriesParameterSupplier_init(OrgJunitExperimentalTheoriesParameterSupplier *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitExperimentalTheoriesParameterSupplier)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJunitExperimentalTheoriesParameterSupplier")
