//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/junit/experimental/theories/Theories.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJunitExperimentalTheoriesTheories")
#ifdef RESTRICT_OrgJunitExperimentalTheoriesTheories
#define INCLUDE_ALL_OrgJunitExperimentalTheoriesTheories 0
#else
#define INCLUDE_ALL_OrgJunitExperimentalTheoriesTheories 1
#endif
#undef RESTRICT_OrgJunitExperimentalTheoriesTheories

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJunitExperimentalTheoriesTheories_) && (INCLUDE_ALL_OrgJunitExperimentalTheoriesTheories || defined(INCLUDE_OrgJunitExperimentalTheoriesTheories))
#define OrgJunitExperimentalTheoriesTheories_

#define RESTRICT_OrgJunitRunnersBlockJUnit4ClassRunner 1
#define INCLUDE_OrgJunitRunnersBlockJUnit4ClassRunner 1
#include "org/junit/runners/BlockJUnit4ClassRunner.h"

@class IOSClass;
@class OrgJunitRunnersModelFrameworkMethod;
@class OrgJunitRunnersModelStatement;
@class OrgJunitRunnersModelTestClass;
@protocol JavaUtilList;

/*!
 @brief The Theories runner allows to test a certain functionality against a subset of an infinite set of data points.
 <p>
  A Theory is a piece of functionality (a method) that is executed against several data inputs called data points.
  To make a test method a theory you mark it with <b>&#064;Theory</b>. To create a data point you create a public
  field in your test class and mark it with <b>&#064;DataPoint</b>. The Theories runner then executes your test
  method as many times as the number of data points declared, providing a different data point as
  the input argument on each invocation. 
 </p>
  <p>
  A Theory differs from standard test method in that it captures some aspect of the intended behavior in possibly
  infinite numbers of scenarios which corresponds to the number of data points declared. Using assumptions and
  assertions properly together with covering multiple scenarios with different data points can make your tests more
  flexible and bring them closer to scientific theories (hence the name). 
 </p>
  <p>
  For example: 
 @code

  
  &#064;RunWith(<b>Theories.class</b>)
  public class UserTest {
            <b>&#064;DataPoint</b>
       public static String GOOD_USERNAME = "optimus";      
      <b>&#064;DataPoint</b>
       public static String USERNAME_WITH_SLASH = "optimus/prime";      
      <b>&#064;Theory</b>
       public void filenameIncludesUsername(String username) {
           assumeThat(username, not(containsString("/")));
           assertThat(new User(username).configFileName(), containsString(username));
       }     }     
  
@endcode
  This makes it clear that the username should be included in the config file name,
  only if it doesn't contain a slash. Another test or theory might define what happens when a username does contain a slash. 
 <code>UserTest</code> will attempt to run <code>filenameIncludesUsername</code> on every compatible data
  point defined in the class. If any of the assumptions fail, the data point is silently ignored. If all of the
  assumptions pass, but an assertion fails, the test fails. If no parameters can be found that satisfy all assumptions, the test fails. 
 <p>
  Defining general statements as theories allows data point reuse across a bunch of functionality tests and also
  allows automated tools to search for new, unexpected data points that expose bugs. 
 </p>
  <p>
  The support for Theories has been absorbed from the Popper project, and more complete documentation can be found
  from that projects archived documentation. 
 </p>
 - seealso: <a href="http://web.archive.org/web/20071012143326/popper.tigris.org/tutorial.html">Archived Popper project documentation</a>
 - seealso: <a href="http://web.archive.org/web/20110608210825/http://shareandenjoy.saff.net/tdd-specifications.pdf">Paper on Theories</a>
 */
@interface OrgJunitExperimentalTheoriesTheories : OrgJunitRunnersBlockJUnit4ClassRunner

#pragma mark Public

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)klass;

- (OrgJunitRunnersModelStatement *)methodBlockWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method;

#pragma mark Protected

/*!
 @since 4.13
 */
- (instancetype __nonnull)initWithOrgJunitRunnersModelTestClass:(OrgJunitRunnersModelTestClass *)testClass;

- (void)collectInitializationErrorsWithJavaUtilList:(id<JavaUtilList>)errors;

- (id<JavaUtilList>)computeTestMethods;

- (void)validateConstructorWithJavaUtilList:(id<JavaUtilList>)errors;

- (void)validateTestMethodsWithJavaUtilList:(id<JavaUtilList>)errors;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitExperimentalTheoriesTheories)

FOUNDATION_EXPORT void OrgJunitExperimentalTheoriesTheories_initWithIOSClass_(OrgJunitExperimentalTheoriesTheories *self, IOSClass *klass);

FOUNDATION_EXPORT OrgJunitExperimentalTheoriesTheories *new_OrgJunitExperimentalTheoriesTheories_initWithIOSClass_(IOSClass *klass) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJunitExperimentalTheoriesTheories *create_OrgJunitExperimentalTheoriesTheories_initWithIOSClass_(IOSClass *klass);

FOUNDATION_EXPORT void OrgJunitExperimentalTheoriesTheories_initWithOrgJunitRunnersModelTestClass_(OrgJunitExperimentalTheoriesTheories *self, OrgJunitRunnersModelTestClass *testClass);

FOUNDATION_EXPORT OrgJunitExperimentalTheoriesTheories *new_OrgJunitExperimentalTheoriesTheories_initWithOrgJunitRunnersModelTestClass_(OrgJunitRunnersModelTestClass *testClass) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJunitExperimentalTheoriesTheories *create_OrgJunitExperimentalTheoriesTheories_initWithOrgJunitRunnersModelTestClass_(OrgJunitRunnersModelTestClass *testClass);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitExperimentalTheoriesTheories)

#endif

#if !defined (OrgJunitExperimentalTheoriesTheories_TheoryAnchor_) && (INCLUDE_ALL_OrgJunitExperimentalTheoriesTheories || defined(INCLUDE_OrgJunitExperimentalTheoriesTheories_TheoryAnchor))
#define OrgJunitExperimentalTheoriesTheories_TheoryAnchor_

#define RESTRICT_OrgJunitRunnersModelStatement 1
#define INCLUDE_OrgJunitRunnersModelStatement 1
#include "org/junit/runners/model/Statement.h"

@class IOSObjectArray;
@class JavaLangThrowable;
@class OrgJunitExperimentalTheoriesInternalAssignments;
@class OrgJunitInternalAssumptionViolatedException;
@class OrgJunitRunnersModelFrameworkMethod;
@class OrgJunitRunnersModelTestClass;

@interface OrgJunitExperimentalTheoriesTheories_TheoryAnchor : OrgJunitRunnersModelStatement

#pragma mark Public

- (instancetype __nonnull)initWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)testMethod
                                    withOrgJunitRunnersModelTestClass:(OrgJunitRunnersModelTestClass *)testClass;

- (void)evaluate;

#pragma mark Protected

- (void)handleAssumptionViolationWithOrgJunitInternalAssumptionViolatedException:(OrgJunitInternalAssumptionViolatedException *)e;

- (void)handleDataPointSuccess;

- (void)reportParameterizedErrorWithJavaLangThrowable:(JavaLangThrowable *)e
                                    withNSObjectArray:(IOSObjectArray *)params;

- (void)runWithAssignmentWithOrgJunitExperimentalTheoriesInternalAssignments:(OrgJunitExperimentalTheoriesInternalAssignments *)parameterAssignment;

- (void)runWithCompleteAssignmentWithOrgJunitExperimentalTheoriesInternalAssignments:(OrgJunitExperimentalTheoriesInternalAssignments *)complete;

- (void)runWithIncompleteAssignmentWithOrgJunitExperimentalTheoriesInternalAssignments:(OrgJunitExperimentalTheoriesInternalAssignments *)incomplete;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitExperimentalTheoriesTheories_TheoryAnchor)

FOUNDATION_EXPORT void OrgJunitExperimentalTheoriesTheories_TheoryAnchor_initWithOrgJunitRunnersModelFrameworkMethod_withOrgJunitRunnersModelTestClass_(OrgJunitExperimentalTheoriesTheories_TheoryAnchor *self, OrgJunitRunnersModelFrameworkMethod *testMethod, OrgJunitRunnersModelTestClass *testClass);

FOUNDATION_EXPORT OrgJunitExperimentalTheoriesTheories_TheoryAnchor *new_OrgJunitExperimentalTheoriesTheories_TheoryAnchor_initWithOrgJunitRunnersModelFrameworkMethod_withOrgJunitRunnersModelTestClass_(OrgJunitRunnersModelFrameworkMethod *testMethod, OrgJunitRunnersModelTestClass *testClass) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJunitExperimentalTheoriesTheories_TheoryAnchor *create_OrgJunitExperimentalTheoriesTheories_TheoryAnchor_initWithOrgJunitRunnersModelFrameworkMethod_withOrgJunitRunnersModelTestClass_(OrgJunitRunnersModelFrameworkMethod *testMethod, OrgJunitRunnersModelTestClass *testClass);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitExperimentalTheoriesTheories_TheoryAnchor)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJunitExperimentalTheoriesTheories")
