//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/junit/internal/Throwables.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJunitInternalThrowables")
#ifdef RESTRICT_OrgJunitInternalThrowables
#define INCLUDE_ALL_OrgJunitInternalThrowables 0
#else
#define INCLUDE_ALL_OrgJunitInternalThrowables 1
#endif
#undef RESTRICT_OrgJunitInternalThrowables

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJunitInternalThrowables_) && (INCLUDE_ALL_OrgJunitInternalThrowables || defined(INCLUDE_OrgJunitInternalThrowables))
#define OrgJunitInternalThrowables_

@class JavaLangException;
@class JavaLangThrowable;

/*!
 @brief Miscellaneous functions dealing with <code>Throwable</code>.
 @author kcooney@@google.com (Kevin Cooney)
 @since 4.12
 */
@interface OrgJunitInternalThrowables : NSObject

#pragma mark Public

/*!
 @brief Returns the stacktrace of the given Throwable as a String.
 @since 4.13
 */
+ (NSString *)getStacktraceWithJavaLangThrowable:(JavaLangThrowable *)exception;

/*!
 @brief Gets a trimmed version of the stack trace of the given exception.Stack trace
  elements that are below the test method are filtered out.
 @return a trimmed stack trace, or the original trace if trimming wasn't possible
 */
+ (NSString *)getTrimmedStackTraceWithJavaLangThrowable:(JavaLangThrowable *)exception;

/*!
 @brief Rethrows the given <code>Throwable</code>, allowing the caller to
  declare that it throws <code>Exception</code>.This is useful when
  your callers have nothing reasonable they can do when a 
 <code>Throwable</code> is thrown.
 This is declared to return <code>Exception</code>
  so it can be used in a <code>throw</code> clause: 
 @code

  try {
    doSomething();
  } catch (Throwable e} {
    throw Throwables.rethrowAsException(e);
  }
  doSomethingLater(); 
  
@endcode
 @param e exception to rethrow
 @return does not return anything
 @since 4.12
 */
+ (JavaLangException *)rethrowAsExceptionWithJavaLangThrowable:(JavaLangThrowable *)e;

@end

J2OBJC_STATIC_INIT(OrgJunitInternalThrowables)

FOUNDATION_EXPORT JavaLangException *OrgJunitInternalThrowables_rethrowAsExceptionWithJavaLangThrowable_(JavaLangThrowable *e);

FOUNDATION_EXPORT NSString *OrgJunitInternalThrowables_getStacktraceWithJavaLangThrowable_(JavaLangThrowable *exception);

FOUNDATION_EXPORT NSString *OrgJunitInternalThrowables_getTrimmedStackTraceWithJavaLangThrowable_(JavaLangThrowable *exception);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitInternalThrowables)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJunitInternalThrowables")
