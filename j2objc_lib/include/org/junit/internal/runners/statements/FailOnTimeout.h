//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/junit/internal/runners/statements/FailOnTimeout.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJunitInternalRunnersStatementsFailOnTimeout")
#ifdef RESTRICT_OrgJunitInternalRunnersStatementsFailOnTimeout
#define INCLUDE_ALL_OrgJunitInternalRunnersStatementsFailOnTimeout 0
#else
#define INCLUDE_ALL_OrgJunitInternalRunnersStatementsFailOnTimeout 1
#endif
#undef RESTRICT_OrgJunitInternalRunnersStatementsFailOnTimeout

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJunitInternalRunnersStatementsFailOnTimeout_) && (INCLUDE_ALL_OrgJunitInternalRunnersStatementsFailOnTimeout || defined(INCLUDE_OrgJunitInternalRunnersStatementsFailOnTimeout))
#define OrgJunitInternalRunnersStatementsFailOnTimeout_

#define RESTRICT_OrgJunitRunnersModelStatement 1
#define INCLUDE_OrgJunitRunnersModelStatement 1
#include "org/junit/runners/model/Statement.h"

@class OrgJunitInternalRunnersStatementsFailOnTimeout_Builder;

@interface OrgJunitInternalRunnersStatementsFailOnTimeout : OrgJunitRunnersModelStatement

#pragma mark Public

/*!
 @brief Creates an instance wrapping the given statement with the given timeout in milliseconds.
 @param statement the statement to wrap
 @param timeoutMillis the timeout in milliseconds
 */
- (instancetype __nonnull)initWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement
                                                       withLong:(jlong)timeoutMillis __attribute__((deprecated));

/*!
 @brief Returns a new builder for building an instance.
 @since 4.12
 */
+ (OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *)builder;

- (void)evaluate;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitInternalRunnersStatementsFailOnTimeout)

FOUNDATION_EXPORT OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *OrgJunitInternalRunnersStatementsFailOnTimeout_builder(void);

FOUNDATION_EXPORT void OrgJunitInternalRunnersStatementsFailOnTimeout_initWithOrgJunitRunnersModelStatement_withLong_(OrgJunitInternalRunnersStatementsFailOnTimeout *self, OrgJunitRunnersModelStatement *statement, jlong timeoutMillis);

FOUNDATION_EXPORT OrgJunitInternalRunnersStatementsFailOnTimeout *new_OrgJunitInternalRunnersStatementsFailOnTimeout_initWithOrgJunitRunnersModelStatement_withLong_(OrgJunitRunnersModelStatement *statement, jlong timeoutMillis) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJunitInternalRunnersStatementsFailOnTimeout *create_OrgJunitInternalRunnersStatementsFailOnTimeout_initWithOrgJunitRunnersModelStatement_withLong_(OrgJunitRunnersModelStatement *statement, jlong timeoutMillis);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitInternalRunnersStatementsFailOnTimeout)

#endif

#if !defined (OrgJunitInternalRunnersStatementsFailOnTimeout_Builder_) && (INCLUDE_ALL_OrgJunitInternalRunnersStatementsFailOnTimeout || defined(INCLUDE_OrgJunitInternalRunnersStatementsFailOnTimeout_Builder))
#define OrgJunitInternalRunnersStatementsFailOnTimeout_Builder_

@class JavaUtilConcurrentTimeUnit;
@class OrgJunitInternalRunnersStatementsFailOnTimeout;
@class OrgJunitRunnersModelStatement;

/*!
 @brief Builder for <code>FailOnTimeout</code>.
 @since 4.12
 */
@interface OrgJunitInternalRunnersStatementsFailOnTimeout_Builder : NSObject

#pragma mark Public

/*!
 @brief Builds a <code>FailOnTimeout</code> instance using the values in this builder,
  wrapping the given statement.
 @param statement
 */
- (OrgJunitInternalRunnersStatementsFailOnTimeout *)buildWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement;

/*!
 @brief Specifies whether to look for a stuck thread.If a timeout occurs and this
  feature is enabled, the test will look for a thread that appears to be stuck
  and dump its backtrace.
 This feature is experimental.  Behavior may change
  after the 4.12 release in response to feedback.
 @param enable<code>true</code>  to enable the feature
 @return <code>this</code> for method chaining.
 */
- (OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *)withLookingForStuckThreadWithBoolean:(jboolean)enable;

/*!
 @brief Specifies the time to wait before timing out the test.
 <p>If this is not called, or is called with a <code>timeout</code> of 
 <code>0</code>, the returned <code>Statement</code> will wait forever for the
  test to complete, however the test will still launch from a separate
  thread. This can be useful for disabling timeouts in environments
  where they are dynamically set based on some property.
 @param timeout the maximum time to wait
 @param unit the time unit of the <code>timeout</code>  argument
 @return <code>this</code> for method chaining.
 */
- (OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *)withTimeoutWithLong:(jlong)timeout
                                                 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitInternalRunnersStatementsFailOnTimeout_Builder)

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitInternalRunnersStatementsFailOnTimeout_Builder)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJunitInternalRunnersStatementsFailOnTimeout")
