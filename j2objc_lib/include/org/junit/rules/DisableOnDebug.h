//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/junit/rules/DisableOnDebug.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJunitRulesDisableOnDebug")
#ifdef RESTRICT_OrgJunitRulesDisableOnDebug
#define INCLUDE_ALL_OrgJunitRulesDisableOnDebug 0
#else
#define INCLUDE_ALL_OrgJunitRulesDisableOnDebug 1
#endif
#undef RESTRICT_OrgJunitRulesDisableOnDebug

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJunitRulesDisableOnDebug_) && (INCLUDE_ALL_OrgJunitRulesDisableOnDebug || defined(INCLUDE_OrgJunitRulesDisableOnDebug))
#define OrgJunitRulesDisableOnDebug_

#define RESTRICT_OrgJunitRulesTestRule 1
#define INCLUDE_OrgJunitRulesTestRule 1
#include "org/junit/rules/TestRule.h"

@class OrgJunitRunnerDescription;
@class OrgJunitRunnersModelStatement;
@protocol JavaUtilList;

/*!
 @brief The <code>DisableOnDebug</code> Rule allows you to label certain rules to be
  disabled when debugging.
 <p>
  The most illustrative use case is for tests that make use of the 
 <code>Timeout</code> rule, when ran in debug mode the test may terminate on
  timeout abruptly during debugging. Developers may disable the timeout, or
  increase the timeout by making a code change on tests that need debugging and
  remember revert the change afterwards or rules such as <code>Timeout</code> that
  may be disabled during debugging may be wrapped in a <code>DisableOnDebug</code>.
  <p>
  The important benefit of this feature is that you can disable such rules
  without any making any modifications to your test class to remove them during
  debugging. 
 <p>
  This does nothing to tackle timeouts or time sensitive code under test when
  debugging and may make this less useful in such circumstances. 
 <p>
  Example usage:  
 @code

  public static class DisableTimeoutOnDebugSampleTest { 
          &#064;Rule
      public TestRule timeout = new DisableOnDebug(new Timeout(20));      
     &#064;Test
      public void myTest() {
          int i = 0;
          assertEquals(0, i); // suppose you had a break point here to inspect i
      }    }    
  
@endcode
 @since 4.12
 */
@interface OrgJunitRulesDisableOnDebug : NSObject < OrgJunitRulesTestRule >

#pragma mark Public

/*!
 @brief Create a <code>DisableOnDebug</code> instance with the timeout specified in
  milliseconds.
 @param rule to disable during debugging
 */
- (instancetype __nonnull)initWithOrgJunitRulesTestRule:(id<OrgJunitRulesTestRule>)rule;

/*!
 - seealso: TestRule#apply(Statement, Description)
 */
- (OrgJunitRunnersModelStatement *)applyWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)base
                                            withOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_;

/*!
 @brief Returns <code>true</code> if the JVM is in debug mode.This method may be used
  by test classes to take additional action to disable code paths that
  interfere with debugging if required.
 @return <code>true</code> if the current JVM is in debug mode, <code>false</code>
          otherwise
 */
- (jboolean)isDebugging;

#pragma mark Package-Private

/*!
 @brief Visible for testing purposes only.
 @param rule the rule to disable during debugging
 @param inputArguments arguments provided to the Java runtime
 */
- (instancetype __nonnull)initWithOrgJunitRulesTestRule:(id<OrgJunitRulesTestRule>)rule
                                       withJavaUtilList:(id<JavaUtilList>)inputArguments;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRulesDisableOnDebug)

FOUNDATION_EXPORT void OrgJunitRulesDisableOnDebug_initWithOrgJunitRulesTestRule_(OrgJunitRulesDisableOnDebug *self, id<OrgJunitRulesTestRule> rule);

FOUNDATION_EXPORT OrgJunitRulesDisableOnDebug *new_OrgJunitRulesDisableOnDebug_initWithOrgJunitRulesTestRule_(id<OrgJunitRulesTestRule> rule) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJunitRulesDisableOnDebug *create_OrgJunitRulesDisableOnDebug_initWithOrgJunitRulesTestRule_(id<OrgJunitRulesTestRule> rule);

FOUNDATION_EXPORT void OrgJunitRulesDisableOnDebug_initWithOrgJunitRulesTestRule_withJavaUtilList_(OrgJunitRulesDisableOnDebug *self, id<OrgJunitRulesTestRule> rule, id<JavaUtilList> inputArguments);

FOUNDATION_EXPORT OrgJunitRulesDisableOnDebug *new_OrgJunitRulesDisableOnDebug_initWithOrgJunitRulesTestRule_withJavaUtilList_(id<OrgJunitRulesTestRule> rule, id<JavaUtilList> inputArguments) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJunitRulesDisableOnDebug *create_OrgJunitRulesDisableOnDebug_initWithOrgJunitRulesTestRule_withJavaUtilList_(id<OrgJunitRulesTestRule> rule, id<JavaUtilList> inputArguments);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitRulesDisableOnDebug)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJunitRulesDisableOnDebug")
