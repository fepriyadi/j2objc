//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/junit/rules/ExpectedException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJunitRulesExpectedException")
#ifdef RESTRICT_OrgJunitRulesExpectedException
#define INCLUDE_ALL_OrgJunitRulesExpectedException 0
#else
#define INCLUDE_ALL_OrgJunitRulesExpectedException 1
#endif
#undef RESTRICT_OrgJunitRulesExpectedException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJunitRulesExpectedException_) && (INCLUDE_ALL_OrgJunitRulesExpectedException || defined(INCLUDE_OrgJunitRulesExpectedException))
#define OrgJunitRulesExpectedException_

#define RESTRICT_OrgJunitRulesTestRule 1
#define INCLUDE_OrgJunitRulesTestRule 1
#include "org/junit/rules/TestRule.h"

@class IOSClass;
@class OrgJunitRunnerDescription;
@class OrgJunitRunnersModelStatement;
@protocol OrgHamcrestMatcher;

/*!
 @brief The <code>ExpectedException</code> rule allows you to verify that your code
  throws a specific exception.
 <h3>Usage</h3>
  
 @code
 public class SimpleExpectedExceptionTest {
          &#064;Rule
      public ExpectedException thrown = ExpectedException.none();     
     &#064;Test
      public void throwsNothing() {
          // no exception expected, none thrown: passes.
      }     
     &#064;Test
      public void throwsExceptionWithSpecificType() {
          thrown.expect(NullPointerException.class);
          throw new NullPointerException();
      }    }
 
@endcode
   
 <p>You have to add the <code>ExpectedException</code> rule to your test.
  This doesn't affect your existing tests (see <code>throwsNothing()</code>).
  After specifying the type of the expected exception your test is
  successful when such an exception is thrown and it fails if a
  different or no exception is thrown. 
 <p>This rule does not perform any special magic to make execution continue
  as if the exception had not been thrown. So it is nearly always a mistake
  for a test method to have statements after the one that is expected to
  throw the exception. 
 <p>Instead of specifying the exception's type you can characterize the
  expected exception based on other criteria, too: 
 <ul>
    <li>The exception's message contains a specific text: <code>expectMessage(String)</code></li>
    <li>The exception's message complies with a Hamcrest matcher: <code>expectMessage(Matcher)</code></li>
    <li>The exception's cause complies with a Hamcrest matcher: <code>expectCause(Matcher)</code></li>
    <li>The exception itself complies with a Hamcrest matcher: <code>expect(Matcher)</code></li>
  </ul>
  
 <p>You can combine any of the presented expect-methods. The test is
  successful if all specifications are met. 
 @code
 &#064;Test
  public void throwsException() {
      thrown.expect(NullPointerException.class);
      thrown.expectMessage(&quot;happened&quot;);
      throw new NullPointerException(&quot;What happened?&quot;);
  }
@endcode
  
 <p>It is recommended to set the <code>order</code> of the 
 <code>ExpectedException</code> to <code>Integer.MAX_VALUE</code> if it is used together
  with another rule that handles exceptions, e.g. <code>ErrorCollector</code>.
  Otherwise failing tests may be successful. 
 @code
 &#064;Rule(order = Integer.MAX_VALUE)
  public ExpectedException thrown = ExpectedException.none();
@endcode
  
 <h3>AssumptionViolatedExceptions</h3>
  <p>JUnit uses <code>AssumptionViolatedException</code>s for indicating that a test
  provides no useful information. (See <code>org.junit.Assume</code> for more
  information.) You have to call <code>assume</code> methods before you set
  expectations of the <code>ExpectedException</code> rule. In this case the rule
  will not handle consume the exceptions and it can be handled by the
  framework. E.g. the following test is ignored by JUnit's default runner. 
 @code
 &#064;Test
  public void ignoredBecauseOfFailedAssumption() {
      assumeTrue(false); // throws AssumptionViolatedException
      thrown.expect(NullPointerException.class);
  }
@endcode
  
 <h3>AssertionErrors</h3>
  
 <p>JUnit uses <code>AssertionError</code>s for indicating that a test is failing. You
  have to call <code>assert</code> methods before you set expectations of the 
 <code>ExpectedException</code> rule, if they should be handled by the framework.
  E.g. the following test fails because of the <code>assertTrue</code> statement. 
 @code
 &#064;Test
  public void throwsUnhandled() {
      assertTrue(false); // throws AssertionError
      thrown.expect(NullPointerException.class);
  }
@endcode
  
 <h3>Missing Exceptions</h3>
  <p>By default missing exceptions are reported with an error message
  like "Expected test to throw an instance of foo". You can configure a different
  message by means of <code>reportMissingExceptionWithMessage(String)</code>. You
  can use a <code>%s</code> placeholder for the description of the expected
  exception. E.g. "Test doesn't throw %s." will fail with the error message
  "Test doesn't throw an instance of foo.".
 @since 4.7
 */
@interface OrgJunitRulesExpectedException : NSObject < OrgJunitRulesTestRule >

#pragma mark Public

- (OrgJunitRunnersModelStatement *)applyWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)base
                                            withOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_;

/*!
 @brief Verify that your code throws an exception that is an
  instance of specific <code>type</code>.
 @code
 &#064;Test
  public void throwsExceptionWithSpecificType() {
      thrown.expect(NullPointerException.class);
      throw new NullPointerException();
  }
@endcode
 */
- (void)expectWithIOSClass:(IOSClass *)type;

/*!
 @brief Verify that your code throws an exception that is matched by
  a Hamcrest matcher.
 @code
 &#064;Test
  public void throwsExceptionThatCompliesWithMatcher() {
      NullPointerException e = new NullPointerException();
      thrown.expect(is(e));
      throw e;
  }
@endcode
 */
- (void)expectWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

/*!
 @brief Verify that your code throws an exception whose cause is matched by 
  a Hamcrest matcher.
 @code
 &#064;Test
  public void throwsExceptionWhoseCauseCompliesWithMatcher() {
      NullPointerException expectedCause = new NullPointerException();
      thrown.expectCause(is(expectedCause));
      throw new IllegalArgumentException(&quot;What happened?&quot;, cause);
  }
@endcode
 */
- (void)expectCauseWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)expectedCause;

/*!
 @brief Verify that your code throws an exception whose message is matched 
  by a Hamcrest matcher.
 @code
 &#064;Test
  public void throwsExceptionWhoseMessageCompliesWithMatcher() {
      thrown.expectMessage(startsWith(&quot;What&quot;));
      throw new NullPointerException(&quot;What happened?&quot;);
  }
@endcode
 */
- (void)expectMessageWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

/*!
 @brief Verify that your code throws an exception whose message contains
  a specific text.
 @code
 &#064;Test
  public void throwsExceptionWhoseMessageContainsSpecificText() {
      thrown.expectMessage(&quot;happened&quot;);
      throw new NullPointerException(&quot;What happened?&quot;);
  }
@endcode
 */
- (void)expectMessageWithNSString:(NSString *)substring;

/*!
 @brief This method does nothing.Don't use it.
 */
- (OrgJunitRulesExpectedException *)handleAssertionErrors __attribute__((deprecated));

/*!
 @brief This method does nothing.Don't use it.
 */
- (OrgJunitRulesExpectedException *)handleAssumptionViolatedExceptions __attribute__((deprecated));

/*!
 @brief Check if any Exception is expected.
 @since 4.13
 */
- (jboolean)isAnyExceptionExpected;

/*!
 @brief Returns a rule that expects no exception to
  be thrown (identical to behavior without this rule).
 */
+ (OrgJunitRulesExpectedException *)none __attribute__((deprecated));

/*!
 @brief Specifies the failure message for tests that are expected to throw 
  an exception but do not throw any.You can use a <code>%s</code> placeholder for
  the description of the expected exception.
 E.g. "Test doesn't throw %s."
  will fail with the error message
  "Test doesn't throw an instance of foo.".
 @param message exception detail message
 @return the rule itself
 */
- (OrgJunitRulesExpectedException *)reportMissingExceptionWithMessageWithNSString:(NSString *)message;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRulesExpectedException)

FOUNDATION_EXPORT OrgJunitRulesExpectedException *OrgJunitRulesExpectedException_none(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitRulesExpectedException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJunitRulesExpectedException")
