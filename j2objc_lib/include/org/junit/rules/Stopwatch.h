//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/junit/rules/Stopwatch.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJunitRulesStopwatch")
#ifdef RESTRICT_OrgJunitRulesStopwatch
#define INCLUDE_ALL_OrgJunitRulesStopwatch 0
#else
#define INCLUDE_ALL_OrgJunitRulesStopwatch 1
#endif
#undef RESTRICT_OrgJunitRulesStopwatch

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJunitRulesStopwatch_) && (INCLUDE_ALL_OrgJunitRulesStopwatch || defined(INCLUDE_OrgJunitRulesStopwatch))
#define OrgJunitRulesStopwatch_

#define RESTRICT_OrgJunitRulesTestRule 1
#define INCLUDE_OrgJunitRulesTestRule 1
#include "org/junit/rules/TestRule.h"

@class JavaLangThrowable;
@class JavaUtilConcurrentTimeUnit;
@class OrgJunitAssumptionViolatedException;
@class OrgJunitRulesStopwatch_Clock;
@class OrgJunitRunnerDescription;
@class OrgJunitRunnersModelStatement;

/*!
 @brief The Stopwatch Rule notifies one of its own protected methods of the time spent by a test.
 <p>Override them to get the time in nanoseconds. For example, this class will keep logging the
  time spent by each passed, failed, skipped, and finished test: 
 @code

  public static class StopwatchTest {
      private static final Logger logger = Logger.getLogger(&quot;&quot;);
      private static void logInfo(Description description, String status, long nanos) {
          String testName = description.getMethodName();
          logger.info(String.format(&quot;Test %s %s, spent %d microseconds&quot;,
                                    testName, status, TimeUnit.NANOSECONDS.toMicros(nanos)));
      }     
     &#064;Rule
      public Stopwatch stopwatch = new Stopwatch() {
                  &#064;Override
          protected void succeeded(long nanos, Description description) {
              logInfo(description, &quot;succeeded&quot;, nanos);
          }         
         &#064;Override
          protected void failed(long nanos, Throwable e, Description description) {
              logInfo(description, &quot;failed&quot;, nanos);
          }         
         &#064;Override
          protected void skipped(long nanos, AssumptionViolatedException e, Description description) {
              logInfo(description, &quot;skipped&quot;, nanos);
          }         
         &#064;Override
          protected void finished(long nanos, Description description) {
              logInfo(description, &quot;finished&quot;, nanos);
          }
      };     
     &#064;Test
      public void succeeds() {
      }     
     &#064;Test
      public void fails() {
          fail();
      }     
     &#064;Test
      public void skips() {
          assumeTrue(false);
      }    }    
  
@endcode
  An example to assert runtime: 
 @code

   &#064;Test
  public void performanceTest() throws InterruptedException {
      long delta = 30;
      Thread.sleep(300L);
      assertEquals(300d, stopwatch.runtime(MILLISECONDS), delta);
      Thread.sleep(500L);
      assertEquals(800d, stopwatch.runtime(MILLISECONDS), delta);
  } 
  
@endcode
 @author tibor17
 @since 4.12
 */
@interface OrgJunitRulesStopwatch : NSObject < OrgJunitRulesTestRule >

#pragma mark Public

- (instancetype __nonnull)init;

- (OrgJunitRunnersModelStatement *)applyWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)base
                                            withOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_;

/*!
 @brief Gets the runtime for the test.
 @param unit time unit for returned runtime
 @return runtime measured during the test
 */
- (jlong)runtimeWithJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

#pragma mark Protected

/*!
 @brief Invoked when a test fails
 */
- (void)failedWithLong:(jlong)nanos
 withJavaLangThrowable:(JavaLangThrowable *)e
withOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_;

/*!
 @brief Invoked when a test method finishes (whether passing or failing)
 */
- (void)finishedWithLong:(jlong)nanos
withOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_;

/*!
 @brief Invoked when a test is skipped due to a failed assumption.
 */
- (void)skippedWithLong:(jlong)nanos
withOrgJunitAssumptionViolatedException:(OrgJunitAssumptionViolatedException *)e
withOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_;

/*!
 @brief Invoked when a test succeeds
 */
- (void)succeededWithLong:(jlong)nanos
withOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_;

#pragma mark Package-Private

- (instancetype __nonnull)initWithOrgJunitRulesStopwatch_Clock:(OrgJunitRulesStopwatch_Clock *)clock;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRulesStopwatch)

FOUNDATION_EXPORT void OrgJunitRulesStopwatch_init(OrgJunitRulesStopwatch *self);

FOUNDATION_EXPORT OrgJunitRulesStopwatch *new_OrgJunitRulesStopwatch_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJunitRulesStopwatch *create_OrgJunitRulesStopwatch_init(void);

FOUNDATION_EXPORT void OrgJunitRulesStopwatch_initWithOrgJunitRulesStopwatch_Clock_(OrgJunitRulesStopwatch *self, OrgJunitRulesStopwatch_Clock *clock);

FOUNDATION_EXPORT OrgJunitRulesStopwatch *new_OrgJunitRulesStopwatch_initWithOrgJunitRulesStopwatch_Clock_(OrgJunitRulesStopwatch_Clock *clock) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJunitRulesStopwatch *create_OrgJunitRulesStopwatch_initWithOrgJunitRulesStopwatch_Clock_(OrgJunitRulesStopwatch_Clock *clock);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitRulesStopwatch)

#endif

#if !defined (OrgJunitRulesStopwatch_Clock_) && (INCLUDE_ALL_OrgJunitRulesStopwatch || defined(INCLUDE_OrgJunitRulesStopwatch_Clock))
#define OrgJunitRulesStopwatch_Clock_

@interface OrgJunitRulesStopwatch_Clock : NSObject

#pragma mark Public

- (jlong)nanoTime;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRulesStopwatch_Clock)

FOUNDATION_EXPORT void OrgJunitRulesStopwatch_Clock_init(OrgJunitRulesStopwatch_Clock *self);

FOUNDATION_EXPORT OrgJunitRulesStopwatch_Clock *new_OrgJunitRulesStopwatch_Clock_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJunitRulesStopwatch_Clock *create_OrgJunitRulesStopwatch_Clock_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitRulesStopwatch_Clock)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJunitRulesStopwatch")
