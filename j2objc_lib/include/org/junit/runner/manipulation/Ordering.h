//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/junit/runner/manipulation/Ordering.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJunitRunnerManipulationOrdering")
#ifdef RESTRICT_OrgJunitRunnerManipulationOrdering
#define INCLUDE_ALL_OrgJunitRunnerManipulationOrdering 0
#else
#define INCLUDE_ALL_OrgJunitRunnerManipulationOrdering 1
#endif
#undef RESTRICT_OrgJunitRunnerManipulationOrdering

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJunitRunnerManipulationOrdering_) && (INCLUDE_ALL_OrgJunitRunnerManipulationOrdering || defined(INCLUDE_OrgJunitRunnerManipulationOrdering))
#define OrgJunitRunnerManipulationOrdering_

@class IOSClass;
@class JavaUtilRandom;
@class OrgJunitRunnerDescription;
@protocol JavaUtilCollection;
@protocol JavaUtilList;
@protocol OrgJunitRunnerManipulationOrdering_Factory;

/*!
 @brief Reorders tests.An <code>Ordering</code> can reverse the order of tests, sort the
  order or even shuffle the order.
 <p>In general you will not need to use a <code>Ordering</code> directly.
  Instead, use <code>org.junit.runner.Request.orderWith(Ordering)</code>.
 @since 4.13
 */
@interface OrgJunitRunnerManipulationOrdering : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Order the tests in <code>target</code> using this ordering.
 @throw InvalidOrderingExceptionif ordering does something invalid (like remove or add
  children)
 */
- (void)applyWithId:(id)target;

/*!
 @brief Creates an <code>Ordering</code> from the given factory class.The class must have a public no-arg
  constructor.
 @param factoryClass class to use to create the ordering
 @param annotatedTestClass test class that is annotated with <code>OrderWith</code> .
 @throw InvalidOrderingExceptionif the instance could not be created
 */
+ (OrgJunitRunnerManipulationOrdering *)definedByWithIOSClass:(IOSClass *)factoryClass
                                withOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)annotatedTestClass;

/*!
 @brief Creates an <code>Ordering</code> from the given factory.
 @param factory factory to use to create the ordering
 @param annotatedTestClass test class that is annotated with <code>OrderWith</code> .
 @throw InvalidOrderingExceptionif the instance could not be created
 */
+ (OrgJunitRunnerManipulationOrdering *)definedByWithOrgJunitRunnerManipulationOrdering_Factory:(id<OrgJunitRunnerManipulationOrdering_Factory>)factory
                                                                  withOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)annotatedTestClass;

/*!
 @brief Creates an <code>Ordering</code> that shuffles the items using the given 
 <code>Random</code> instance.
 */
+ (OrgJunitRunnerManipulationOrdering *)shuffledByWithJavaUtilRandom:(JavaUtilRandom *)random;

#pragma mark Protected

/*!
 @brief Implemented by sub-classes to order the descriptions.
 @return descriptions in order
 */
- (id<JavaUtilList>)orderItemsWithJavaUtilCollection:(id<JavaUtilCollection>)descriptions;

#pragma mark Package-Private

/*!
 @brief Returns <code>true</code> if this ordering could produce invalid results (i.e.
 if it could add or remove values).
 */
- (jboolean)validateOrderingIsCorrect;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRunnerManipulationOrdering)

FOUNDATION_EXPORT void OrgJunitRunnerManipulationOrdering_init(OrgJunitRunnerManipulationOrdering *self);

FOUNDATION_EXPORT OrgJunitRunnerManipulationOrdering *OrgJunitRunnerManipulationOrdering_shuffledByWithJavaUtilRandom_(JavaUtilRandom *random);

FOUNDATION_EXPORT OrgJunitRunnerManipulationOrdering *OrgJunitRunnerManipulationOrdering_definedByWithIOSClass_withOrgJunitRunnerDescription_(IOSClass *factoryClass, OrgJunitRunnerDescription *annotatedTestClass);

FOUNDATION_EXPORT OrgJunitRunnerManipulationOrdering *OrgJunitRunnerManipulationOrdering_definedByWithOrgJunitRunnerManipulationOrdering_Factory_withOrgJunitRunnerDescription_(id<OrgJunitRunnerManipulationOrdering_Factory> factory, OrgJunitRunnerDescription *annotatedTestClass);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitRunnerManipulationOrdering)

#endif

#if !defined (OrgJunitRunnerManipulationOrdering_Context_) && (INCLUDE_ALL_OrgJunitRunnerManipulationOrdering || defined(INCLUDE_OrgJunitRunnerManipulationOrdering_Context))
#define OrgJunitRunnerManipulationOrdering_Context_

@class OrgJunitRunnerDescription;

/*!
 @brief Context about the ordering being applied.
 */
@interface OrgJunitRunnerManipulationOrdering_Context : NSObject

#pragma mark Public

/*!
 @brief Gets the description for the top-level target being ordered.
 */
- (OrgJunitRunnerDescription *)getTarget;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRunnerManipulationOrdering_Context)

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitRunnerManipulationOrdering_Context)

#endif

#if !defined (OrgJunitRunnerManipulationOrdering_Factory_) && (INCLUDE_ALL_OrgJunitRunnerManipulationOrdering || defined(INCLUDE_OrgJunitRunnerManipulationOrdering_Factory))
#define OrgJunitRunnerManipulationOrdering_Factory_

@class OrgJunitRunnerManipulationOrdering;
@class OrgJunitRunnerManipulationOrdering_Context;

/*!
 @brief Factory for creating <code>Ordering</code> instances.
 <p>For a factory to be used with <code>@@OrderWith</code> it needs to have a public no-arg
  constructor.
 */
@protocol OrgJunitRunnerManipulationOrdering_Factory < JavaObject >

/*!
 @brief Creates an Ordering instance using the given context.Implementations
  of this method that do not need to use the context can return the
  same instance every time.
 */
- (OrgJunitRunnerManipulationOrdering *)createWithOrgJunitRunnerManipulationOrdering_Context:(OrgJunitRunnerManipulationOrdering_Context *)context;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRunnerManipulationOrdering_Factory)

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitRunnerManipulationOrdering_Factory)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJunitRunnerManipulationOrdering")
