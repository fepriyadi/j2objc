//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/junit/runner/notification/RunListener.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJunitRunnerNotificationRunListener")
#ifdef RESTRICT_OrgJunitRunnerNotificationRunListener
#define INCLUDE_ALL_OrgJunitRunnerNotificationRunListener 0
#else
#define INCLUDE_ALL_OrgJunitRunnerNotificationRunListener 1
#endif
#undef RESTRICT_OrgJunitRunnerNotificationRunListener

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJunitRunnerNotificationRunListener_) && (INCLUDE_ALL_OrgJunitRunnerNotificationRunListener || defined(INCLUDE_OrgJunitRunnerNotificationRunListener))
#define OrgJunitRunnerNotificationRunListener_

@class OrgJunitRunnerDescription;
@class OrgJunitRunnerNotificationFailure;
@class OrgJunitRunnerResult;

/*!
 @brief Register an instance of this class with <code>RunNotifier</code> to be notified
  of events that occur during a test run.All of the methods in this class
  are abstract and have no implementation; override one or more methods to
  receive events.
 <p>
  For example, suppose you have a <code>Cowbell</code>
  class that you want to make a noise whenever a test fails. You could write: 
 @code

  public class RingingListener extends RunListener {
     public void testFailure(Failure failure) {
        Cowbell.ring();
     }   }   
  
@endcode
  <p>
  To invoke your listener, you need to run your tests through <code>JUnitCore</code>.
  @code

  public void main(String... args) {
     JUnitCore core= new JUnitCore();
     core.addListener(new RingingListener());
     core.run(MyTestClass.class);
  } 
  
@endcode
  <p>
  If a listener throws an exception for a test event, the other listeners will
  have their <code>RunListener.testFailure(Failure)</code> called with a <code>Description</code>
  of <code>Description.TEST_MECHANISM</code> to indicate the failure. 
 <p>
  By default, JUnit will synchronize calls to your listener. If your listener
  is thread-safe and you want to allow JUnit to call your listener from
  multiple threads when tests are run in parallel, you can annotate your
  test class with <code>RunListener.ThreadSafe</code>.
  <p>
  Listener methods will be called from the same thread as is running
  the test, unless otherwise indicated by the method Javadoc
 - seealso: org.junit.runner.JUnitCore
 @since 4.0
 */
@interface OrgJunitRunnerNotificationRunListener : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Called when an atomic test flags that it assumes a condition that is
  false
 @param failure describes the test that failed and the  
 <code>org.junit.AssumptionViolatedException</code>  that was thrown
 */
- (void)testAssumptionFailureWithOrgJunitRunnerNotificationFailure:(OrgJunitRunnerNotificationFailure *)failure;

/*!
 @brief Called when an atomic test fails, or when a listener throws an exception.
 <p>In the case of a failure of an atomic test, this method will be called
  with the same <code>Description</code> passed to 
 <code>testStarted(Description)</code>, from the same thread that called 
 <code>testStarted(Description)</code>.
  
 <p>In the case of a listener throwing an exception, this will be called with a 
 <code>Description</code> of <code>Description.TEST_MECHANISM</code>, and may be called
  on an arbitrary thread.
 @param failure describes the test that failed and the exception that was thrown
 */
- (void)testFailureWithOrgJunitRunnerNotificationFailure:(OrgJunitRunnerNotificationFailure *)failure;

/*!
 @brief Called when an atomic test has finished, whether the test succeeds or fails.
 @param description_ the description of the test that just ran
 */
- (void)testFinishedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_;

/*!
 @brief Called when a test will not be run, generally because a test method is annotated
  with <code>org.junit.Ignore</code>.
 @param description_ describes the test that will not be run
 */
- (void)testIgnoredWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_;

/*!
 @brief Called when all tests have finished.This may be called on an
  arbitrary thread.
 @param result the summary of the test run, including all the tests that failed
 */
- (void)testRunFinishedWithOrgJunitRunnerResult:(OrgJunitRunnerResult *)result;

/*!
 @brief Called before any tests have been run.This may be called on an
  arbitrary thread.
 @param description_ describes the tests to be run
 */
- (void)testRunStartedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_;

/*!
 @brief Called when an atomic test is about to be started.
 @param description_ the description of the test that is about to be run  (generally a class and method name)
 */
- (void)testStartedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_;

/*!
 @brief Called when a test suite has finished, whether the test suite succeeds or fails.
 This method will not be called for a given <code>Description</code> unless 
 <code>testSuiteStarted(Description)</code> was called for the same @@code Description}.
 @param description_ the description of the test suite that just ran
 @since 4.13
 */
- (void)testSuiteFinishedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_;

/*!
 @brief Called when a test suite is about to be started.If this method is
  called for a given <code>Description</code>, then <code>testSuiteFinished(Description)</code>
  will also be called for the same <code>Description</code>.
 <p>Note that not all runners will call this method, so runners should
  be prepared to handle <code>testStarted(Description)</code> calls for tests
  where there was no corresponding <code>testSuiteStarted()</code> call for
  the parent <code>Description</code>.
 @param description_ the description of the test suite that is about to be run                     (generally a class name)
 @since 4.13
 */
- (void)testSuiteStartedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRunnerNotificationRunListener)

FOUNDATION_EXPORT void OrgJunitRunnerNotificationRunListener_init(OrgJunitRunnerNotificationRunListener *self);

FOUNDATION_EXPORT OrgJunitRunnerNotificationRunListener *new_OrgJunitRunnerNotificationRunListener_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJunitRunnerNotificationRunListener *create_OrgJunitRunnerNotificationRunListener_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitRunnerNotificationRunListener)

#endif

#if !defined (OrgJunitRunnerNotificationRunListener_ThreadSafe_) && (INCLUDE_ALL_OrgJunitRunnerNotificationRunListener || defined(INCLUDE_OrgJunitRunnerNotificationRunListener_ThreadSafe))
#define OrgJunitRunnerNotificationRunListener_ThreadSafe_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

/*!
 @brief Indicates a <code>RunListener</code> that can have its methods called
  concurrently.This implies that the class is thread-safe (i.e. no set of
  listener calls can put the listener into an invalid state, even if those
  listener calls are being made by multiple threads without
  synchronization).
 @since 4.12
 */
@protocol OrgJunitRunnerNotificationRunListener_ThreadSafe < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface OrgJunitRunnerNotificationRunListener_ThreadSafe : NSObject < OrgJunitRunnerNotificationRunListener_ThreadSafe >

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRunnerNotificationRunListener_ThreadSafe)

FOUNDATION_EXPORT id<OrgJunitRunnerNotificationRunListener_ThreadSafe> create_OrgJunitRunnerNotificationRunListener_ThreadSafe(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitRunnerNotificationRunListener_ThreadSafe)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJunitRunnerNotificationRunListener")
